-- Enable the pgvector extension
create extension if not exists vector;

-- Create the recipe_embeddings table
create table if not exists recipe_embeddings (
    id bigint generated by default as identity primary key,
    title text not null,
    cuisine text,
    difficulty text,
    ingredients text[],
    instructions text[],
    tips text[],
    embedding vector(1536),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create an index for faster similarity search
create index on recipe_embeddings using ivfflat (embedding vector_cosine_ops)
with (lists = 100);

-- Create a function to find similar recipes
create or replace function match_recipes(
    query_embedding vector(1536),
    match_threshold float,
    match_count int
)
returns table (
    id bigint,
    title text,
    cuisine text,
    difficulty text,
    ingredients text[],
    instructions text[],
    tips text[],
    similarity float
)
language plpgsql
as $$
begin
    return query
    select
        recipe_embeddings.id,
        recipe_embeddings.title,
        recipe_embeddings.cuisine,
        recipe_embeddings.difficulty,
        recipe_embeddings.ingredients,
        recipe_embeddings.instructions,
        recipe_embeddings.tips,
        1 - (recipe_embeddings.embedding <=> query_embedding) as similarity
    from recipe_embeddings
    where 1 - (recipe_embeddings.embedding <=> query_embedding) > match_threshold
    order by recipe_embeddings.embedding <=> query_embedding
    limit match_count;
end;
$$; 